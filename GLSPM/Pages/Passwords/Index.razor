@page "/Passwords"
@attribute [Authorize]
<div class="d-flex flex-wrap justify-space-between">
    <MudText Typo="Typo.h3" Class="mb-5" Align="Align.Left">
        Passwords
    </MudText>
    <MudButton Variant="Variant.Filled" @onclick="@(async ()=>await OpenCreateDialog())" StartIcon="@Icons.Material.Filled.Create" Color="Color.Primary" Class="align-self-center" Size="Size.Large">New</MudButton>
</div>
<MudAutocomplete T="string" Label="Search Active Passwords" Style="margin-bottom:20px;max-width:500px;"
                 AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" />

 @if (PasswordsResponse != null && PasswordsResponse.Data.Count() >= 1)
{
    <div class="d-flex gap-5 flex-wrap">

        @for (var i = 0; i < PasswordsResponse.Data.Count(); i++)
        {
            <PasswordCard Model=" PasswordsResponse.Data.ElementAt(i)" OnRefreshPasswords="(async ()=>await LoadPasswords())" />
        }
    </div>
    <div class="d-flex flex-column align-center">
        <MudPagination ShowFirstButton="true" ShowLastButton="true" Count=" PasswordsResponse.TotalPages" Class="mt-4" />
    </div>
}

<style>
    .mud-select.mud-autocomplete {
        display: flex !important;
        justify-content: center;
    }
</style>
@code {
    [Inject] IPasswordsService PasswordsService { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] IDialogService DialogService { get; set; }

    private MultiObjectsResponse<IEnumerable<PasswordReadDto>> PasswordsResponse;
    private string activebadge = "Active";
    private async Task OpenCreateDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var results = DialogService.Show<CreatePasswordDialog>("Create New Password", options);
        if (await results.GetReturnValueAsync<bool>())
        {
            PasswordsResponse = await PasswordsService.GetListAsync(new GetListDto());
            if (!PasswordsResponse.Success)
            {
                Snackbar.Add("faild loading the data");
                Snackbar.Add(PasswordsResponse.Error.ToString(), Severity.Error);
            }
        }
    }
    protected async override Task OnInitializedAsync()
    {
        await LoadPasswords();
        if (!PasswordsResponse.Success)
        {
            Snackbar.Add("faild loading the data");
            Snackbar.Add(PasswordsResponse.Error.ToString(), Severity.Error);
            PasswordsService.PasswordsChnaged += StateHasChanged;
        }
    }

    async Task LoadPasswords()
    {
        PasswordsResponse = await PasswordsService.GetListAsync(new GetListDto());
    }
}

@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar 
<MudCard Class="card">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h5">@Model.Title</MudText>
            @if (!string.IsNullOrWhiteSpace(Model.Source))
            {
                <MudText Typo="Typo.body2">@FormatedSource</MudText>
            }
        </CardHeaderContent>
        <CardHeaderActions>
            <MudChip Color="Color.Success" Size="Size.Small">Active</MudChip>
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardMedia Image="@Model.LogoPath" Height="150" />
    <MudCardContent>
        <MudTextField T="string" Label="Username" Variant="Variant.Filled" Text="@Model.Username" ReadOnly="true" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.ContentCopy"
                      OnAdornmentClick="@(async()=>await CopyContent("UN"))" />
        <MudTextField T="string" Label="Password" InputType="InputType.Password" Variant="Variant.Filled" Text="@Model.Password" ReadOnly="true" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.ContentCopy"
                      OnAdornmentClick="@(async ()=>await CopyContent("PW"))" />
    </MudCardContent>
    <MudCardActions>
        <MudTooltip Text="Details">
            <MudIconButton Icon="@Icons.Material.Filled.Preview" Color="Color.Primary" />
        </MudTooltip>
        <MudTooltip Text="Edit">
            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Warning" />
        </MudTooltip>
        <MudTooltip Text="Delete">
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" />
        </MudTooltip>
    </MudCardActions>
</MudCard>

@code {
    [Parameter] public PasswordReadDto Model { get; set; }
    private string FormatedSource => $"Source<{Model.Source}>";
    async Task CopyContent(string txt)
    {
        switch (txt)
        {
            case "UN":
                await JSRuntime.InvokeVoidAsync("clipboardCopy.copyText", Model.Username);
                break;
            case "PW":
                await JSRuntime.InvokeVoidAsync("clipboardCopy.copyText", Model.Password);
                break;
        }
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add("Content Copied!", Severity.Normal);
    }

}
